import ObservedApi from "../common/data/ObservedApi";
import ApiConfig from "../common/data/ApiConfig";
import ApiBufferKey from "../buffer/ApiBufferKey";
import HttpRequest from "./HttpRequest";
import HttpResponse from "./HttpResponse";
import AgentConfig from "../common/data/AgentConfig";
declare class RequestResponseContext {
    private readonly request;
    private response;
    private readonly applicationName;
    private observedApi;
    private apiConfig;
    private agentConfig;
    private apiBufferKey;
    private requestPayloadCaptureAttempted;
    private responsePayloadCaptureAttempted;
    private payloadCaptureAttempted;
    private latency;
    constructor(request: HttpRequest, applicationName: string);
    getRequest(): HttpRequest;
    getResponse(): HttpResponse | undefined;
    setResponse(response: HttpResponse): void;
    getApplicationName(): string;
    getObservedApi(): ObservedApi;
    setObservedApi(observedApi: ObservedApi): void;
    getApiConfig(): ApiConfig;
    setApiConfig(apiConfig: ApiConfig): void;
    getAgentConfig(): AgentConfig;
    setAgentConfig(agentConfig: AgentConfig): void;
    getApiBufferKey(): ApiBufferKey;
    setApiBufferKey(apiBufferKey: ApiBufferKey): void;
    isRequestPayloadCaptureAttempted(): boolean;
    setRequestPayloadCaptureAttempted(requestPayloadCaptureAttempted: boolean): void;
    isResponsePayloadCaptureAttempted(): boolean;
    setResponsePayloadCaptureAttempted(responsePayloadCaptureAttempted: boolean): void;
    isPayloadCaptureAttempted(): boolean;
    setPayloadCaptureAttempted(payloadCaptureAttempted: boolean): void;
    getLatency(): number;
    setLatency(latency: number): void;
}
export default RequestResponseContext;
